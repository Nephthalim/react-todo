{"ast":null,"code":"var _jsxFileName = \"/Users/nephthalimabebe/Desktop/react-todo/client/src/pages/DashboardPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Navbar from '../components/Dashboard/Navbar';\nimport NewTaskButton from '../components/Dashboard/NewTaskButton';\nimport TodoList from '../components/Dashboard/TodoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DashboardPage = ({\n  setAuthentication\n}) => {\n  _s();\n\n  const [todoList, setTodoList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState({\n    name: \"\"\n  });\n  const history = useHistory();\n  const token = localStorage.getItem(\"token\");\n  const url = \"http://localhost:5000\";\n\n  const getUser = () => {\n    fetch(url + \"/\", {\n      method: 'GET',\n      headers: {\n        'token': token\n      }\n    }).then(res => {\n      if (res.status === 200) return res.json();else if (res.status === 403) {\n        localStorage.removeItem('token');\n        setAuthentication(false);\n      }\n    }).then(data => {\n      setUser({\n        name: data.name\n      });\n    }).catch(err => {\n      localStorage.removeItem('token');\n      setAuthentication(false);\n    });\n  };\n\n  const getTodoList = () => {\n    fetch(url + \"/todo\", {\n      method: 'GET',\n      headers: {\n        'token': token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setTodoList(data.todos);\n    }).catch(err => {\n      localStorage.removeItem('token');\n      setAuthentication(false);\n    });\n  };\n\n  const searchTask = searchQuery => {\n    console.log(`Searching ${searchQuery}`);\n    fetch(url + '/search?query=' + searchQuery.query, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': \"application/json\",\n        \"token\": token\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setTodoList(data.searchResult);\n    }).catch(err => {\n      localStorage.removeItem('token');\n      setAuthentication(false);\n    });\n  };\n\n  const deleteTodo = id => {\n    setTodoList(todoList.filter(todo => todo.id !== id));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUser();\n    getTodoList();\n    setIsLoading(false);\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        name: user.name,\n        setAuthentication: setAuthentication,\n        searchTask: searchTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        todos: todoList,\n        deleteTodo: deleteTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewTaskButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n_s(DashboardPage, \"yu2Z4+FNPUymsQnGpPuA4kToUFc=\", false, function () {\n  return [useHistory];\n});\n\n_c = DashboardPage;\nexport default DashboardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"sources":["/Users/nephthalimabebe/Desktop/react-todo/client/src/pages/DashboardPage.js"],"names":["React","useState","useEffect","useHistory","Navbar","NewTaskButton","TodoList","DashboardPage","setAuthentication","todoList","setTodoList","isLoading","setIsLoading","user","setUser","name","history","token","localStorage","getItem","url","getUser","fetch","method","headers","then","res","status","json","removeItem","data","catch","err","getTodoList","todos","searchTask","searchQuery","console","log","query","searchResult","deleteTodo","id","filter","todo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport Navbar from '../components/Dashboard/Navbar'\nimport NewTaskButton from '../components/Dashboard/NewTaskButton'\nimport TodoList from '../components/Dashboard/TodoList'\n\nconst DashboardPage = ({ setAuthentication }) => {\n\n    const [todoList, setTodoList] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [user, setUser] = useState({ name: \"\" });\n    const history = useHistory();\n    const token = localStorage.getItem(\"token\")\n    const url = \"http://localhost:5000\"\n\n    const getUser = () => {\n        fetch(\n            url + \"/\",\n            {\n                method: 'GET',\n                headers: {\n                    'token': token,\n                }\n            }\n\n        ).then((res) => {\n            if (res.status === 200) return res.json();\n            else if (res.status === 403) {\n                localStorage.removeItem('token')\n                setAuthentication(false)\n\n            }\n\n        }).then((data) => {\n            setUser({ name: data.name })\n\n        }).catch((err) => {\n            localStorage.removeItem('token')\n            setAuthentication(false)\n        })\n    }\n    const getTodoList = () => {\n        fetch(\n            url + \"/todo\",\n            {\n                method: 'GET',\n                headers: {\n                    'token': token,\n                }\n            }\n        ).then((res) => {\n            return res.json();\n        }).then((data) => {\n            setTodoList(data.todos)\n        }).catch((err) => {\n            localStorage.removeItem('token')\n            setAuthentication(false)\n        })\n\n    }\n\n    const searchTask = (searchQuery) => {\n        console.log(`Searching ${searchQuery}`)\n        fetch(\n            url + '/search?query=' + searchQuery.query,\n            {\n                method: \"GET\",\n                headers:\n                {\n                    'Content-Type': \"application/json\",\n                    \"token\": token\n                }\n            }).then((res) => {\n                return res.json()\n            }).then((data) => {\n                setTodoList(data.searchResult)\n            }).catch((err) => {\n                localStorage.removeItem('token')\n                setAuthentication(false)\n            })\n    }\n\n    const deleteTodo = (id) => {\n        setTodoList(todoList.filter(todo => todo.id !== id))\n    }\n\n    useEffect(() => {\n        setIsLoading(true);\n        getUser();\n        getTodoList();\n        setIsLoading(false);\n    }, [])\n    if (isLoading) {\n        return (\n            <section>\n                <p>Loading...</p>\n            </section>\n        );\n    }\n    else {\n        return (\n            <>\n                <Navbar name={user.name} setAuthentication={setAuthentication} searchTask={searchTask} />\n                {/* <Navbar name={\"Nephy\"} setAuthentication={setAuthentication} searchTask={searchTask} /> */}\n                <TodoList todos={todoList} deleteTodo={deleteTodo} />\n                <NewTaskButton />\n\n\n            </>\n        )\n\n    }\n}\n\nexport default DashboardPage\n"]},"metadata":{},"sourceType":"module"}